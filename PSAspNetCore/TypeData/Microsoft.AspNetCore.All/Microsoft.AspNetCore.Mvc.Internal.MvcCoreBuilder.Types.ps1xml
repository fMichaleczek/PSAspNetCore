<?xml version="1.0" encoding="utf-8" ?>
<Types>
  <Type>
    <Name>Microsoft.AspNetCore.Mvc.Internal.MvcCoreBuilder</Name>
    <Members>
      <ScriptMethod>
        <Name>AddApiExplorer</Name>
        <Script> switch ($args.Count) {
				 # AddApiExplorer([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions]::AddApiExplorer($this) }

		 default { throw "No overload for 'AddApiExplorer' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddMvcOptions</Name>
        <Script> switch ($args.Count) {
				 # AddMvcOptions([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.MvcOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddMvcOptions($this,$args[0]) }

		 default { throw "No overload for 'AddMvcOptions' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddFormatterMappings</Name>
        <Script> switch ($args.Count) {
				 # AddFormatterMappings([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddFormatterMappings($this) }

				 # AddFormatterMappings([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddFormatterMappings($this,$args[0]) }

		 default { throw "No overload for 'AddFormatterMappings' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddAuthorization</Name>
        <Script> switch ($args.Count) {
				 # AddAuthorization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddAuthorization($this) }

				 # AddAuthorization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Authorization.AuthorizationOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddAuthorization($this,$args[0]) }

		 default { throw "No overload for 'AddAuthorization' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddControllersAsServices</Name>
        <Script> switch ($args.Count) {
				 # AddControllersAsServices([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddControllersAsServices($this) }

		 default { throw "No overload for 'AddControllersAsServices' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddApplicationPart</Name>
        <Script> switch ($args.Count) {
				 # AddApplicationPart([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Reflection.Assembly] $assembly)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::AddApplicationPart($this,$args[0]) }

		 default { throw "No overload for 'AddApplicationPart' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ConfigureApplicationPartManager</Name>
        <Script> switch ($args.Count) {
				 # ConfigureApplicationPartManager([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions]::ConfigureApplicationPartManager($this,$args[0]) }

		 default { throw "No overload for 'ConfigureApplicationPartManager' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddCors</Name>
        <Script> switch ($args.Count) {
				 # AddCors([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions]::AddCors($this) }

				 # AddCors([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions]::AddCors($this,$args[0]) }

		 default { throw "No overload for 'AddCors' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ConfigureCors</Name>
        <Script> switch ($args.Count) {
				 # ConfigureCors([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions]::ConfigureCors($this,$args[0]) }

		 default { throw "No overload for 'ConfigureCors' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddDataAnnotations</Name>
        <Script> switch ($args.Count) {
				 # AddDataAnnotations([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions]::AddDataAnnotations($this) }

		 default { throw "No overload for 'AddDataAnnotations' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddDataAnnotationsLocalization</Name>
        <Script> switch ($args.Count) {
				 # AddDataAnnotationsLocalization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions]::AddDataAnnotationsLocalization($this) }

				 # AddDataAnnotationsLocalization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions]::AddDataAnnotationsLocalization($this,$args[0]) }

		 default { throw "No overload for 'AddDataAnnotationsLocalization' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddJsonFormatters</Name>
        <Script> switch ($args.Count) {
				 # AddJsonFormatters([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions]::AddJsonFormatters($this) }

				 # AddJsonFormatters([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Newtonsoft.Json.JsonSerializerSettings]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions]::AddJsonFormatters($this,$args[0]) }

		 default { throw "No overload for 'AddJsonFormatters' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddJsonOptions</Name>
        <Script> switch ($args.Count) {
				 # AddJsonOptions([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.MvcJsonOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions]::AddJsonOptions($this,$args[0]) }

		 default { throw "No overload for 'AddJsonOptions' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddViewLocalization</Name>
        <Script> switch ($args.Count) {
				 # AddViewLocalization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions]::AddViewLocalization($this) }

				 # AddViewLocalization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat] $format)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions]::AddViewLocalization($this,$args[0]) }

				 # AddViewLocalization([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat] $format, [System.Action`1[Microsoft.Extensions.Localization.LocalizationOptions]] $setupAction)
		 2 { [Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions]::AddViewLocalization($this,$args[0],$args[1]) }

		 default { throw "No overload for 'AddViewLocalization' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddRazorViewEngine</Name>
        <Script> switch ($args.Count) {
				 # AddRazorViewEngine([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions]::AddRazorViewEngine($this) }

				 # AddRazorViewEngine([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions]::AddRazorViewEngine($this,$args[0]) }

		 default { throw "No overload for 'AddRazorViewEngine' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddTagHelpersAsServices</Name>
        <Script> switch ($args.Count) {
				 # AddTagHelpersAsServices([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions]::AddTagHelpersAsServices($this) }

		 default { throw "No overload for 'AddTagHelpersAsServices' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>InitializeTagHelper</Name>
        <Script> switch ($args.Count) {
				 # InitializeTagHelper([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`2[TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext]] $initialize)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions]::InitializeTagHelper($this,$args[0]) }

		 default { throw "No overload for 'InitializeTagHelper' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddRazorPages</Name>
        <Script> switch ($args.Count) {
				 # AddRazorPages([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions]::AddRazorPages($this) }

				 # AddRazorPages([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions]::AddRazorPages($this,$args[0]) }

		 default { throw "No overload for 'AddRazorPages' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>WithRazorPagesRoot</Name>
        <Script> switch ($args.Count) {
				 # WithRazorPagesRoot([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.String] $rootDirectory)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions]::WithRazorPagesRoot($this,$args[0]) }

		 default { throw "No overload for 'WithRazorPagesRoot' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddViews</Name>
        <Script> switch ($args.Count) {
				 # AddViews([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions]::AddViews($this) }

				 # AddViews([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.MvcViewOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions]::AddViews($this,$args[0]) }

		 default { throw "No overload for 'AddViews' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddCookieTempDataProvider</Name>
        <Script> switch ($args.Count) {
				 # AddCookieTempDataProvider([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions]::AddCookieTempDataProvider($this) }

				 # AddCookieTempDataProvider([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions]::AddCookieTempDataProvider($this,$args[0]) }

		 default { throw "No overload for 'AddCookieTempDataProvider' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ConfigureViews</Name>
        <Script> switch ($args.Count) {
				 # ConfigureViews([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.MvcViewOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions]::ConfigureViews($this,$args[0]) }

		 default { throw "No overload for 'ConfigureViews' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddCacheTagHelper</Name>
        <Script> switch ($args.Count) {
				 # AddCacheTagHelper([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder)
		 0 { [Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions]::AddCacheTagHelper($this) }

		 default { throw "No overload for 'AddCacheTagHelper' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddCacheTagHelperLimits</Name>
        <Script> switch ($args.Count) {
				 # AddCacheTagHelperLimits([Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder] $builder, [System.Action`1[Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions]] $configure)
		 1 { [Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions]::AddCacheTagHelperLimits($this,$args[0]) }

		 default { throw "No overload for 'AddCacheTagHelperLimits' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
    </Members>
  </Type>
</Types>
