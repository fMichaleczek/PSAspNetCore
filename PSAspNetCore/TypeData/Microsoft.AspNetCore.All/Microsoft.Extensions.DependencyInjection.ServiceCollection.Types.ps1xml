<?xml version="1.0" encoding="utf-8" ?>
<Types>
  <Type>
    <Name>Microsoft.Extensions.DependencyInjection.ServiceCollection</Name>
    <Members>
      <ScriptMethod>
        <Name>AddAntiforgery</Name>
        <Script> switch ($args.Count) {
				 # AddAntiforgery([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions]::AddAntiforgery($this) }

				 # AddAntiforgery([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions]::AddAntiforgery($this,$args[0]) }

		 default { throw "No overload for 'AddAntiforgery' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddAuthenticationCore</Name>
        <Script> switch ($args.Count) {
				 # AddAuthenticationCore([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions]::AddAuthenticationCore($this) }

				 # AddAuthenticationCore([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Authentication.AuthenticationOptions]] $configureOptions)
		 1 { [Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions]::AddAuthenticationCore($this,$args[0]) }

		 default { throw "No overload for 'AddAuthenticationCore' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddAuthorization</Name>
        <Script> switch ($args.Count) {
				 # AddAuthorization([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions]::AddAuthorization($this) }

				 # AddAuthorization([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Authorization.AuthorizationOptions]] $configure)
		 1 { [Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions]::AddAuthorization($this,$args[0]) }

		 default { throw "No overload for 'AddAuthorization' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddCors</Name>
        <Script> switch ($args.Count) {
				 # AddCors([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions]::AddCors($this) }

				 # AddCors([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions]::AddCors($this,$args[0]) }

		 default { throw "No overload for 'AddCors' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddDataProtection</Name>
        <Script> switch ($args.Count) {
				 # AddDataProtection([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions]::AddDataProtection($this) }

				 # AddDataProtection([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.DataProtection.DataProtectionOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions]::AddDataProtection($this,$args[0]) }

		 default { throw "No overload for 'AddDataProtection' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddDirectoryBrowser</Name>
        <Script> switch ($args.Count) {
				 # AddDirectoryBrowser([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions]::AddDirectoryBrowser($this) }

		 default { throw "No overload for 'AddDirectoryBrowser' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddWebEncoders</Name>
        <Script> switch ($args.Count) {
				 # AddWebEncoders([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions]::AddWebEncoders($this) }

				 # AddWebEncoders([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.Extensions.WebEncoders.WebEncoderOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions]::AddWebEncoders($this,$args[0]) }

		 default { throw "No overload for 'AddWebEncoders' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Add</Name>
        <Script> switch ($args.Count) {
				 # Add([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [Microsoft.Extensions.DependencyInjection.ServiceDescriptor] $descriptor)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::Add($this,$args[0]) }

		 default { throw "No overload for 'Add' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>TryAdd</Name>
        <Script> switch ($args.Count) {
				 # TryAdd([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [Microsoft.Extensions.DependencyInjection.ServiceDescriptor] $descriptor)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAdd($this,$args[0]) }

		 default { throw "No overload for 'TryAdd' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>TryAddTransient</Name>
        <Script> switch ($args.Count) {
				 # TryAddTransient([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection)
		 0 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddTransient($this) }

				 # TryAddTransient([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $service)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddTransient($this,$args[0]) }

				 # TryAddTransient([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $service, [System.Type] $implementationType)
		 2 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddTransient($this,$args[0],$args[1]) }

		 default { throw "No overload for 'TryAddTransient' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>TryAddScoped</Name>
        <Script> switch ($args.Count) {
				 # TryAddScoped([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection)
		 0 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddScoped($this) }

				 # TryAddScoped([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $service)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddScoped($this,$args[0]) }

				 # TryAddScoped([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $service, [System.Type] $implementationType)
		 2 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddScoped($this,$args[0],$args[1]) }

		 default { throw "No overload for 'TryAddScoped' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>TryAddSingleton</Name>
        <Script> switch ($args.Count) {
				 # TryAddSingleton([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection)
		 0 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddSingleton($this) }

				 # TryAddSingleton([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $service)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddSingleton($this,$args[0]) }

				 # TryAddSingleton([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $service, [System.Type] $implementationType)
		 2 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddSingleton($this,$args[0],$args[1]) }

		 default { throw "No overload for 'TryAddSingleton' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>TryAddEnumerable</Name>
        <Script> switch ($args.Count) {
				 # TryAddEnumerable([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [Microsoft.Extensions.DependencyInjection.ServiceDescriptor] $descriptor)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::TryAddEnumerable($this,$args[0]) }

		 default { throw "No overload for 'TryAddEnumerable' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Replace</Name>
        <Script> switch ($args.Count) {
				 # Replace([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [Microsoft.Extensions.DependencyInjection.ServiceDescriptor] $descriptor)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::Replace($this,$args[0]) }

		 default { throw "No overload for 'Replace' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>RemoveAll</Name>
        <Script> switch ($args.Count) {
				 # RemoveAll([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection)
		 0 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::RemoveAll($this) }

				 # RemoveAll([Microsoft.Extensions.DependencyInjection.IServiceCollection] $collection, [System.Type] $serviceType)
		 1 { [Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions]::RemoveAll($this,$args[0]) }

		 default { throw "No overload for 'RemoveAll' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddLocalization</Name>
        <Script> switch ($args.Count) {
				 # AddLocalization([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions]::AddLocalization($this) }

				 # AddLocalization([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.Extensions.Localization.LocalizationOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions]::AddLocalization($this,$args[0]) }

		 default { throw "No overload for 'AddLocalization' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddLogging</Name>
        <Script> switch ($args.Count) {
				 # AddLogging([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions]::AddLogging($this) }

				 # AddLogging([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.Extensions.Logging.ILoggingBuilder]] $configure)
		 1 { [Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions]::AddLogging($this,$args[0]) }

		 default { throw "No overload for 'AddLogging' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddMemoryCache</Name>
        <Script> switch ($args.Count) {
				 # AddMemoryCache([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions]::AddMemoryCache($this) }

				 # AddMemoryCache([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.Extensions.Caching.Memory.MemoryCacheOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions]::AddMemoryCache($this,$args[0]) }

		 default { throw "No overload for 'AddMemoryCache' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddDistributedMemoryCache</Name>
        <Script> switch ($args.Count) {
				 # AddDistributedMemoryCache([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions]::AddDistributedMemoryCache($this) }

				 # AddDistributedMemoryCache([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions]::AddDistributedMemoryCache($this,$args[0]) }

		 default { throw "No overload for 'AddDistributedMemoryCache' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddMvcCore</Name>
        <Script> switch ($args.Count) {
				 # AddMvcCore([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions]::AddMvcCore($this) }

				 # AddMvcCore([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Mvc.MvcOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions]::AddMvcCore($this,$args[0]) }

		 default { throw "No overload for 'AddMvcCore' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddMvc</Name>
        <Script> switch ($args.Count) {
				 # AddMvc([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions]::AddMvc($this) }

				 # AddMvc([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Mvc.MvcOptions]] $setupAction)
		 1 { [Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions]::AddMvc($this,$args[0]) }

		 default { throw "No overload for 'AddMvc' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Configure</Name>
        <Script> switch ($args.Count) {
				 # Configure([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [Microsoft.Extensions.Configuration.IConfiguration] $config)
		 1 { [Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions]::Configure($this,$args[0]) }

				 # Configure([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.String] $name, [Microsoft.Extensions.Configuration.IConfiguration] $config)
		 2 { [Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions]::Configure($this,$args[0],$args[1]) }

		 default { throw "No overload for 'Configure' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddOptions</Name>
        <Script> switch ($args.Count) {
				 # AddOptions([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions]::AddOptions($this) }

		 default { throw "No overload for 'AddOptions' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ConfigureAll</Name>
        <Script> switch ($args.Count) {
				 # ConfigureAll([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[TOptions]] $configureOptions)
		 1 { [Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions]::ConfigureAll($this,$args[0]) }

		 default { throw "No overload for 'ConfigureAll' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PostConfigure</Name>
        <Script> switch ($args.Count) {
				 # PostConfigure([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[TOptions]] $configureOptions)
		 1 { [Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions]::PostConfigure($this,$args[0]) }

				 # PostConfigure([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.String] $name, [System.Action`1[TOptions]] $configureOptions)
		 2 { [Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions]::PostConfigure($this,$args[0],$args[1]) }

		 default { throw "No overload for 'PostConfigure' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PostConfigureAll</Name>
        <Script> switch ($args.Count) {
				 # PostConfigureAll([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[TOptions]] $configureOptions)
		 1 { [Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions]::PostConfigureAll($this,$args[0]) }

		 default { throw "No overload for 'PostConfigureAll' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddAuthorizationPolicyEvaluator</Name>
        <Script> switch ($args.Count) {
				 # AddAuthorizationPolicyEvaluator([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions]::AddAuthorizationPolicyEvaluator($this) }

		 default { throw "No overload for 'AddAuthorizationPolicyEvaluator' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddRouting</Name>
        <Script> switch ($args.Count) {
				 # AddRouting([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions]::AddRouting($this) }

				 # AddRouting([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Action`1[Microsoft.AspNetCore.Routing.RouteOptions]] $configureOptions)
		 1 { [Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions]::AddRouting($this,$args[0]) }

		 default { throw "No overload for 'AddRouting' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>BuildServiceProvider</Name>
        <Script> switch ($args.Count) {
				 # BuildServiceProvider([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions]::BuildServiceProvider($this) }

				 # BuildServiceProvider([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Boolean] $validateScopes)
		 1 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions]::BuildServiceProvider($this,$args[0]) }

		 default { throw "No overload for 'BuildServiceProvider' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddTransient</Name>
        <Script> switch ($args.Count) {
				 # AddTransient([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddTransient($this) }

				 # AddTransient([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Type] $serviceType)
		 1 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddTransient($this,$args[0]) }

				 # AddTransient([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Type] $serviceType, [System.Type] $implementationType)
		 2 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddTransient($this,$args[0],$args[1]) }

		 default { throw "No overload for 'AddTransient' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddScoped</Name>
        <Script> switch ($args.Count) {
				 # AddScoped([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddScoped($this) }

				 # AddScoped([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Type] $serviceType)
		 1 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddScoped($this,$args[0]) }

				 # AddScoped([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Type] $serviceType, [System.Type] $implementationType)
		 2 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddScoped($this,$args[0],$args[1]) }

		 default { throw "No overload for 'AddScoped' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddSingleton</Name>
        <Script> switch ($args.Count) {
				 # AddSingleton([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services)
		 0 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddSingleton($this) }

				 # AddSingleton([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Type] $serviceType)
		 1 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddSingleton($this,$args[0]) }

				 # AddSingleton([Microsoft.Extensions.DependencyInjection.IServiceCollection] $services, [System.Type] $serviceType, [System.Type] $implementationType)
		 2 { [Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions]::AddSingleton($this,$args[0],$args[1]) }

		 default { throw "No overload for 'AddSingleton' takes the specified number of parameters." }
 }</Script>
      </ScriptMethod>
    </Members>
  </Type>
</Types>
